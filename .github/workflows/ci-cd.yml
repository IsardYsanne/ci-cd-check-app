name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cicd-db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d cicd-db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Make Gradlew Executable
        run: chmod +x ./gradlew

      - name: Build and Test
        run: ./gradlew clean build --info

      - name: Run Tests in Specific Folder
        run: ./gradlew test --no-daemon --tests "ru.app.cicd.**"

      - name: Build Docker Image
        run: |
          docker build -t ci-cd-check-app-app:latest .

      - name: Clean up Docker Containers and Images
        run: |
          docker-compose down || true
          docker system prune -af || true
          sudo lsof -t -i:5432 | xargs sudo kill -9 || true
          sudo fuser -k 5432/tcp || true

      - name: Set up Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

      - name: Start application with Docker Compose
        run: |
          docker-compose up -d

      - name: Wait for the application to start
        run: sleep 30

      - name: Test API
        run: |
          curl -X POST http://localhost:8787/api/v1/developers \
          -H "Content-Type: application/json" \
          -d '{
            "firstName": "Galina",
            "lastName": "Doe",
            "email": "galina.doe@example.com",
            "specialty": "Java",
            "status": "ACTIVE"
          }' -o response.json -w "%{http_code}" > status_code.txt

          STATUS_CODE=$(cat status_code.txt)
          if [ "$STATUS_CODE" -ne 200 ]; then
            echo "API Test Failed! HTTP Status: $STATUS_CODE"
            echo "Response:"
            cat response.json
            exit 1
          fi
          echo "API Test Succeeded! HTTP Status: $STATUS_CODE"